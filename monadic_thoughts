Monad thoughts

Examples are given for Monad: function M(a) { return this.Value = a }
Code is written in either JavaScript or Haskell

A **type variable** can be of any type.
This is much like generics in other languages, only in Haskell it’s
much more powerful because it allows us to easily write very general functions
if they don’t use any specific behavior of the types in them. Functions that
have type variables are called **polymorphic** functions.

bindM takes two arguments, both are functions. It binds them like a generator by calling the first function and wrap the result in a Monad contructer (M) and call the second function with M.
(\a -> k a `bindM` ((\b -> h b))
In JavaScript: TODO

unitM takes one argument, which is a Value of any type (e.i. Number 21, String "Hello World" or Tuple (42,"The answer is")), and return Monad (M).
In Haskell: a -> M a
In JavaScript: let unitM = a => new M(a)

showM gets the Value of a Monad and takes a Monad as argument. If the Monad has a Value property holding the value (e.i. 42) then it can be written:
showM :: M Value -> String
or in JavaScript: function showM (M) { return String(M.Value) } or var showM = M => String(M.Value)